#!/bin/sh

# redirect stdout/stderr from this script to a log file
exec >> "$HOME/.xsession-errors" 2>&1

# load .Xdefaults and .Xresources if they are present
# note that system-wide files are ignored!
if command -v xrdb >/dev/null 2>&1; then
	[ -e $HOME/.Xdefaults ] && xrdb -merge $HOME/.Xdefaults
	[ -e $HOME/.Xresources ] && xrdb -merge $HOME/.Xresources
fi

# if xhost (from x11-xserver-utils) is installed, use it to give access
# to the X server to any process from the same user on the local host.
# unlike other uses of xhost, this is safe since the kernel can check
# the actual owner of the calling process.
if command -v xhost >/dev/null 2>&1; then
	xhost +si:localuser:$(id -un) || :
fi

if command -v 'xdg-user-dirs-update' >/dev/null 2>&1; then
	/usr/bin/xdg-user-dirs-update
fi

# if no argument was passed, try and guess what command to start x with
if [ -z "$*" ]; then
	if command -v 'x-session-manager' >/dev/null 2>&1; then
		X_START_CMD='x-session-manager'
	elif command -v 'x-window-manager' >/dev/null 2>&1; then
		X_START_CMD='x-window-manager'
	else
		echo "No appropriate X start command found!"
		exit 1
	fi
else
	X_START_CMD="$@"
fi

# use dbus-launch to spawn the session if available. this enables X applications
# to talk to dbus because it spawns a dbus session and sets some environment
# variables (I think?)
if command -v 'dbus-launch' >/dev/null 2>&1; then
	X_START_CMD="dbus-launch --exit-with-session $X_START_CMD"
fi

# normally you'd prepend ssh-agent to X_START_CMD, which would set all the
# environment variables and make the agent quit when X quits, but because my
# .xsessionrc requires the ssh-agent environment variables to be present, use
# this nasty hack instead. TODO: find alternative solutions
if command -v 'ssh-agent' >/dev/null 2>&1; then
	killall ssh-agent --user $USER
	eval $(ssh-agent -s)
fi

# look for a script that sets up xrandr
[ -x $HOME/.xrandrinit ] && $HOME/.xrandrinit

# source .xsessionrc if it exists
[ -e $HOME/.xsessionrc ] && . $HOME/.xsessionrc

# start the window manager. this is a blocking command (I think?)
$X_START_CMD

# when the window manager command quits, we can also kill the ssh-agent
if command -v 'ssh-agent' >/dev/null 2>&1; then
	ssh-agent -k
fi
