#!/bin/sh
# note: this script is sourced by either bash or zsh, so it
# does not really need to be dash/POSIX shell compliant.

# this was initially in ~/.ssh/rc but can't check for interactivity there.
# create a symlink for the SSH agent socket so that we can use the symlink path
# in tmux to avoid having to constantly update environment variables when re-
# attaching sessions. only do this in interactive sessions, because some
# additional logic to ensure that this works is in ~/.bash_logout, which is not
# invoked when using non-interactive sessions. it's safe to assume that if you
# start a non-interactive session you're not interested in using tmux anyway.
if [ -n "${SSH_AUTH_SOCK-}" ] && [ ! -L "$SSH_AUTH_SOCK" ]; then
	ln -sf $SSH_AUTH_SOCK $HOME/.ssh/ssh_auth_sock
fi

# don't put duplicate lines or lines starting with space in the history.
export HISTCONTROL=ignoreboth

# history size in memory
export HISTSIZE=5000
# history size in history file
export SAVEHIST=50000
export HISTFILESIZE=50000
export HISTFILE=~/.history

# always limit man to 80 characters wide
export MANWIDTH=80

# make less more friendly for non-text input files, see lesspipe(1)
test -x /usr/bin/lesspipe && eval "$(SHELL=/bin/sh lesspipe)"

# ls --color config with dircolors
export LS_COLORS='fi=0:di=1;34:ow=1;34:ln=33:ex=1;32:mi=0;31'

# self-explanatory
export EDITOR=vim

# less options
export LESS='M x4'
export GIT_PAGER='less -FRX -x5,9'
export SYSTEMD_LESS='KMR +G'
# export SYSTEMD_LESS='FKMRX +G'

# application configuration
export PIPSI_HOME=$HOME/.local/share/pipsi-venvs

# enable colors for grep
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias zgrep='zgrep --color=auto'

# ag doesn't have config files
alias ag="ag --color-path='0;37' --color-line-number='0;33' --color-match='1;34'"

# some ls aliases
alias ls='ls --time-style=long-iso --group-directories-first --color=auto -Fh'
alias l='ls -l'
alias la='l -A'
alias lt='l -tr'
alias l1='ls -1'

# file and dir stuff
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias rm='rm -I --preserve-root'
alias chown='chown --preserve-root'
alias chmod='chmod --preserve-root'
alias chgrp='chgrp --preserve-root'

# make a directory and cd into it
function md {
	mkdir -p "$@" && cd "$_";
}

# i3 shortcuts
alias i3exec='i3-msg exec'
alias i3rename='i3-msg rename workspace to'
alias i3mv='i3-msg move workspace to output'

function apt-everything {
	for cmd in update dist-upgrade autoremove clean; do
		sudo apt $cmd
	done
}

function apt-add-key {
	url="$1"
	if [ -n "$2" ]; then
		file="$2"
	else
		file="$(basename $url)"
	fi
	file="${file%.*}.gpg"
	curl -sSL "$1" | gpg --dearmor > $file
	sudo chown root:root $file
	sudo mv $file /etc/apt/trusted.gpg.d/
}

# misc
alias ap='ansible-playbook'
alias cal='ncal -Mb3'
alias dc='docker-compose'
alias dm='docker-machine'
alias gdiff='git diff --no-index'
alias k='kubectl'
alias lsofi='lsof -i -n -P'
alias most-common='sort | uniq -c | sort -nr | head'
alias pwgen-strong='pwgen -Bs'
alias pwgen-weak='pwgen -ABn'
alias s='sudo service'
alias tf='terraform'
alias tree='tree --dirsfirst'
alias sz='sudo zypper'
alias n='notes --new'
alias nl='notes --list'
alias ns='notes --search'
alias nrm='notes --remove'
alias v='vagrant'

function go {
	if [ -d $PWD/.gopath ]; then
		_gopath="$PWD/.gopath"
	elif [ -n "$GOPATH" ]; then
		_gopath=$GOPATH
	fi

	if [ -n "$_gopath" ]; then
		GOPATH="$_gopath" GOBIN="$_gopath/bin" command go "$@"
	else
		echo "gopath not found!"
	fi
}

# by default, most WMs opening a new terminal will make it start in ~ instead of
# the current terminal's PWD. this alias lets you open a new terminal in the PWD
function t {
	local args="";
	if [ "$*" != "" ]; then
		args="-e $@"
	fi

	args="-cd $PWD $args"

	if command -v i3-msg >/dev/null 2>&1; then
		# opening through i3 exec prevents weird/inconsistent ps trees
		i3-msg "exec x-terminal-emulator $args" >/dev/null 2>&1
	else
		# fork in a subshell to make the commands indepentent,
		# and to suppress all output.
		( x-terminal-emulator $args & )
	fi
}

# set a terminal's title
function termname {
	echo -ne "\033]0;$1\007"
}

# improved ps | grep alias
function psgrep {
	ps auxf | grep "$@" | grep -v grep;
}

# set the keyboard map
function kb {
	setxkbmap -v -option compose:ralt -option caps:super $1 \
		&& xset r rate 175 35
}

# livestreamer/streamlink
function sl {
	args=""
	stream=""
	quality=""
	for arg in "$@"; do
		case $arg in
			-* )
				args="$args $arg"
				;;
			* )
				if [ -z "$stream" ]; then
					stream="$arg"
				elif [ -z "$quality" ]; then
					quality="$arg"
				else
					args="$args $arg"
				fi
				;;
		esac
		shift
	done
	if [ -z "$quality" ]; then
		quality=best
	fi
	streamlink $stream $quality $args
}
alias lvs=sl

# php in docker
function dphp {
	local tty_arg
	tty -s && tty_arg=--tty
	docker run --rm --interactive $tty_arg \
		--volume $PWD:/usr/src/myapp \
		--user $(id -u):$(id -g) \
		--workdir /usr/src/myapp \
		--network host \
		php:7-cli-alpine php "$@"
}

# composer in docker
function dcomposer {
	local tty_arg
	tty -s && tty_arg=--tty
	docker run --rm --interactive $tty_arg \
		--volume $PWD:/app \
		--volume $HOME/.config/composer:/tmp \
		--user $(id -u):$(id -g) \
		--volume $SSH_AUTH_SOCK:/ssh-auth.sock \
		--env SSH_AUTH_SOCK=/ssh-auth.sock \
		composer "$@"
}

# find and activate a python virtualenv
function avenv {
	if [ -n "$VIRTUAL_ENV" ]; then
		echo "A virtualenv is already active!"
		return 1
	fi

	eval $(lsvenv $PWD "$@")

	if [ -z "$venv" ]; then
		echo "Couldn't find a virtualenv in cwd!"
		mkvenv -a "$@" || return $?
		avenv "$@"
		return $?
	fi

	local relpath=$(realpath --relative-to=$PWD $venv)
	if [[ "$relpath" =~ ^\.\. ]]; then
		relpath=$venv
	fi
	echo -n "Activating virtualenv: $relpath"
	echo " - $($venv/bin/python --version 2>&1)"
	echo "Run \`deactivate\` to exit the virtualenv."
	. $venv/bin/activate
	_set_ps1
}

function lsvenv {
	local dir="${1:-$PWD}"
	local name="$2"
	local venv
	local venv_name
	if [ -d $dir/.tox ]; then
		if [ -n "$name" ]; then
			if [ ! -d "$dir/.tox/$name" ]; then
				echo "No tox environment $name found!" >&2
				return 0
			fi
			venv=$dir/.tox/$name
		else
			venv=$(find $dir/.tox -mindepth 1 -maxdepth 1 -name 'py*' | sort | tail -1)
		fi
		venv_name="$(basename $dir)/$(basename $venv)"
	elif [ -f $dir/.virtualenv/bin/activate ]; then
		venv=$dir/.virtualenv
		venv_name=$(basename $dir)
	elif [ -f $dir/.venv/bin/activate ]; then
		venv=$dir/.venv
		venv_name=$(basename $dir)
	elif [ -f $dir/bin/activate ]; then
		venv=$dir
		venv_name=$(basename $dir)
	else
		hash=$(echo -n $dir | sha256sum | cut -d' ' -f1 | cut -c 1-8)
		venv_id="dir-$(basename $dir)-$hash"
		venv="$HOME/.local/venvs/$venv_id"
		if [ -f $venv/bin/activate ]; then
			venv_name=$(basename $dir)
		fi
	fi
	if [ -n "$venv_name" ]; then
		echo "local venv=$venv"
		echo "export VIRTUAL_ENV_NAME=$venv_name"
		return 0
	else
		return 1
	fi
}

function mkvenv {
	local python='python3'
	local ask='no'
	local cmd
	local venv

	while [ $# -gt 0 ]; do
		arg="$1"
		case $arg in
			-a|--ask )
				ask='yes'
				;;
			-p|--python )
				shift
				python="$1"
				;;
			-2|--two )
				python='python2'
				;;
			-3|--three )
				python='python3'
				;;
			-* )
				echo "Unknown option: $arg"
				return 1
				;;
			* )
				if [ -n "$venv" ]; then
					echo "Extra argument received: $arg"
					return 1
				fi
				venv="$1"
				;;
		esac
		shift
	done

	if [[ "$python" =~ ^python3 ]]; then
		cmd="$python -m venv"
	else
		cmd="virtualenv -p $python"
	fi

	if [ -z "$venv" ] || [ "$venv" = "$PWD" ] || [ "$venv" = '.' ]; then
		local dir="$(readlink -f $PWD)"
		local hash=$(echo -n $dir | sha256sum | cut -d' ' -f1 | cut -c 1-8)
		venv_id="dir-$(basename $dir)-$hash"
		local venv="$HOME/.local/venvs/$venv_id"
	fi

	echo "Creating virtualenv in '$venv' using $($python --version 2>&1) ..."
	if [ "$ask" = 'yes' ]; then
		read -p "Confirm [Y/n] "
		if [ -n "$REPLY" ] && ! [[ "$REPLY" =~ ^[Yy] ]]; then
			return 1
		fi
	fi
	$cmd $venv || return 1
	$venv/bin/pip install --upgrade pip setuptools
}

function rmvenv {
	local ask='no'
	local dir

	while [ $# -gt 0 ]; do
		arg="$1"
		case $arg in
			-a|--ask )
				ask='yes'
				;;
			-* )
				echo "Unknown option: $arg"
				return 1
				;;
			* )
				if [ -n "$dir" ]; then
					echo "Extra argument received: $arg"
					return 1
				fi
				dir="$arg"
				break
				;;
		esac
		shift
	done

	if [ -z "$dir" ]; then
		dir="$PWD"
	fi

	eval $(lsvenv $dir)
	if [ -z "$venv" ]; then
		echo "No virtualenv found!"
		return 0
	fi

	if [ "$ask" = 'yes' ]; then
		read -p "Remove virtualenv '$venv'? [Y/n] "
		if [ -n "$REPLY" ] && ! [[ "$REPLY" =~ ^[Yy] ]]; then
			return 1
		fi
	fi

	if [ -n "$VIRTUAL_ENV" ]; then
		deactivate
		_set_ps1
	fi
	echo "Removing $venv ..."
	rm -rf $venv
}

# find and remove pycache files
function clear-pycache {
	find . -type f -name '*.pyc' -print0 | xargs --no-run-if-empty -0 rm
	find . -type d -name '*.egg-info' -print0 | xargs --no-run-if-empty -0 rm -rf
	find . -type d -name '__pycache__' -print0 | xargs --no-run-if-empty -0 rm -rf
}

# clone a github repository
function gh-clone {
	git clone https://github.com/"$@"
}

# fetch a github pull request
function gh-fetch-pr {
	local remote=$(git remote -v | grep '(fetch)' | grep 'github.com' | cut -f 1)
	if [ -n "$remote" ]; then
		git fetch $remote "pull/$1/head:pr-$1"
	else
		echo "No github remote found!"
	fi
}

function hex2oct {
	echo "obase=8; ibase=16; $@" | bc
}
function hex2dec {
	echo "obase=10; ibase=16; $@" | bc
}
function oct2hex {
	echo "obase=16; ibase=8; $@" | bc
}
function oct2dec {
	echo "obase=10; ibase=8; $@" | bc
}

# list network stuff
function lsn {
	local args="-n -P"
	local proto=""
	local state_arg=""
	for arg in "$@"; do
		case $arg in
			-u )
				proto="udp"
				;;
			-t )
				proto="tcp"
				;;
			-l )
				state_arg="-stcp:listen"
				;;
			* )
				args="$args $arg"
				;;
		esac
		shift
	done
	args="$args -i${proto} $state_arg"
	sudo lsof $args
}

function f {
	awk "{ print \$$1 }"
}

# local overrides
if [ -f "$HOME/.shrc.local" ]; then
	. "$HOME/.shrc.local"
fi
