%YAML 1.2
---
name: TICKscript
file_extensions: [tick]
scope: source.tick

contexts:
  main:
    - match: '//'
      push:
        - meta_scope: comment.line.tick
        - match: "\n"
          pop: true

    - match: '((\.)|(\|)|(\@))([A-z_]+)\('
      captures:
        2: keyword.property.tick
        3: keyword.operator.chain.tick
        4: keyword.operator.udf.tick
        5: meta.function-call.object.tick
      push:
        - include: func_call
        - match: '\)'
          pop: true

    - match: '\b(var)\b'
      scope: keyword.control.tick

    - match: '\b(stream|batch|influxql)\b'
      scope: constant.language.tick

  func_call:
    - include: string
    - include: nested_parens

    - match: '"'
      push:
        - meta_scope: variable.column.tick
        - match: '"'
          pop: true

    - match: '\b(\d+(\.\d+)?)\b'
      scope: constant.numeric.tick

    - match: '\b(\d+)([uµmshdw]|ms)\b'
      scope: constant.numeric.tick

    - match: '\b(TRUE|FALSE)\b'
      scope: constant.boolean.tick

    - match: '\b(lambda)(\:)'
      captures:
        1: meta.function.inline.tick storage.function.inline.tick
        2: punctuation.separator.tick

    - match: '[/*+-]'
      scope: keyword.operator.math.tick

    - match: '(==|!=|\b(AND|OR)\b)'
      scope: keyword.operator.logical.tick

    - match: '[><]=?'
      scope: keyword.operator.compare.tick

    - match: '=~'
      scope: keyword.operator.regex.tick

  nested_parens:
    - match: '\('
      push:
        - include: nested_parens
        - include: func_call
    - match: '\)'
      pop: true

  string:
    - match: "'"
      push:
        - meta_scope: string.quoted.tick
        - include: inside_string
        - match: "'"
          pop: true
    - match: "'''"
      push:
        - meta_scope: string.quoted.tick
        - include: inside_string
        - match: "'''"
          pop: true

  inside_string:
    - match: "\\\\'"
      scope: constant.character.escaped.double-quote.tick

    - match: '\{\{'
      scope: entity.template.begin.tick
      push:
        - include: inside_template
        - match: '\}\}'
          scope: entity.template.end.tick
          pop: true

  inside_template:
    - match: '(\.[A-z]+)'
      scope: variable.tick

    - match: '\|'
      scope: keyword.operator.pipe.tick

    - match: '(index)\s+(\.[A-z]+)\s+(\"[^\"]+\")'
      captures:
        1: constant.language.tick
        2: variable.column-type.tick
        3: variable.column.tick

    - match: '\b(printf)\s+(\"[^\"]*\")'
      captures:
        1: constant.language.tick
        2: string.quoted.tick
