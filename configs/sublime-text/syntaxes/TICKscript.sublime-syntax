%YAML 1.2
---
name: TICKscript
file_extensions: [tick]
scope: source.tick

contexts:
  main:
    - match: '((\.)|(\|)|(\@))([A-Za-z_]+)\('
      captures:
        2: keyword.property.tick
        3: keyword.operator.chain.tick
        4: keyword.operator.udf.tick
        5: meta.function-call.object.tick
      push:
        - include: func_call
        - match: '\)'
          pop: true

    - match: '\b(var)\b'
      scope: keyword.control.tick

    - match: '\b(stream|batch|influxql)\b'
      scope: constant.language.tick

  func_call:
    - include: string
    - include: column
    - include: nested_parens

    - match: '\b(\d+(\.\d+)?)\b'
      scope: constant.numeric.tick

    - match: '\b(\d+)(s|m|h|d)\b'
      scope: constant.numeric.tick

    - match: '\b(TRUE|FALSE)\b'
      scope: constant.boolean.tick

    - match: '\b(lambda)(\:)'
      captures:
        1: meta.function.inline.tick storage.function.inline.tick
        2: punctuation.separator.tick

    - match: '[/*+-]'
      scope: keyword.operator.math.tick
    - match: '(==|!=|\b(AND|OR)\b)'
      scope: keyword.operator.logical.tick
    - match: '[><]=?'
      scope: keyword.operator.compare.tick

  nested_parens:
    - match: '\('
      push:
        - include: nested_parens
        - include: func_call
    - match: '\)'
      pop: true

  string:
    - match: "'"
      push:
      - meta_scope: string.quoted.tick
      - match: '\{\{'
        scope: entity.template.begin.tick
        push:
          - include: template
          - match: '\}\}'
            scope: entity.template.end.tick
            pop: true
      - match: "'"
        pop: true

  template:
    - include: column
    - match: '\b(index)\b'
      scope: constant.language.tick
    - match: '\.[A-z_]+'
      scope: variable.tick

  column:
    - match: '"'
      push:
        - meta_scope: meta.function.parameters.tick variable.parameter.function.tick
        - match: '"'
          pop: true
